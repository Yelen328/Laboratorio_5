
Laboratorio_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000005ac  00000640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  00000642  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000642  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000674  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000090f  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076d  00000000  00000000  00001053  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c3  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f3  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  0000218b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002256  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  9e:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <INIT_ADC>:

}


void INIT_ADC(){
	ADMUX = 0;	//Apagar todo
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	
	//Voltaje de referencia 5V
	ADMUX |=(1<<REFS0);
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); //orientación (izquierda)
  b2:	80 81       	ld	r24, Z
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	80 83       	st	Z, r24
	//ADMUX |= (1<<MUX2) | (1<<MUX1);//Selección de canal Bit 6 del puerto C
	
	ADCSRA = 0;	//Apagar todo
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	10 82       	st	Z, r1
	ADCSRA |=(1<<ADPS1)	| (1 << ADPS0); //Configuración del presacaler 8
  be:	80 81       	ld	r24, Z
  c0:	83 60       	ori	r24, 0x03	; 3
  c2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//Habilitación de interrupciones
  c4:	80 81       	ld	r24, Z
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	//Habilitar ADS
  ca:	80 81       	ld	r24, Z
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	80 83       	st	Z, r24
  d0:	08 95       	ret

000000d2 <INIT_TMR0>:
}

void INIT_TMR0(){
	//Configurarlo en modo normal 
	TCCR0A = 0x00; 
  d2:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);   //Prescaler 64
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0xB1;	//Desborde cada 0.5ms
  d8:	81 eb       	ldi	r24, 0xB1	; 177
  da:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1 << TOIE0);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  e2:	08 95       	ret

000000e4 <setup>:
		
	}
}

void setup(){
	cli();	//Desabilitar interrupciones
  e4:	f8 94       	cli
	//INIT_TMR1();	//Llamar a la configuración del timer
	INIT_ADC();
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <INIT_ADC>
	initPWM1A();
  ea:	0e 94 0d 01 	call	0x21a	; 0x21a <initPWM1A>
	initPWM1B();
  ee:	0e 94 2e 01 	call	0x25c	; 0x25c <initPWM1B>
	INIT_TMR0();
  f2:	0e 94 69 00 	call	0xd2	; 0xd2 <INIT_TMR0>
	DDRB|=(1 << PORTB0);
  f6:	84 b1       	in	r24, 0x04	; 4
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	84 b9       	out	0x04, r24	; 4
	CLKPR = (1 << CLKPCE); //Habilita cambios de prescaler
  fc:	e1 e6       	ldi	r30, 0x61	; 97
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	80 83       	st	Z, r24
	CLKPR = (1 << CLKPS2);	// 1MHz
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	80 83       	st	Z, r24
	UCSR0B=0;	//Apagar los bit 0 y 1 del puerto D
 108:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	sei();		//Habilita cambios de interrupción
 10c:	78 94       	sei
	
	ADCSRA |= (1 << ADSC); // Iniciar primera conversión
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 64       	ori	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
 118:	08 95       	ret

0000011a <main>:
void INIT_TMR0();
void INIT_ADC();

int main(void)
{
	setup();
 11a:	0e 94 72 00 	call	0xe4	; 0xe4 <setup>
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x4>

00000120 <__vector_21>:
}

/*************VECTOR DE INTERRUPCIÓN************/

ISR(ADC_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	POT++;
 142:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <POT>
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <POT>
	
	switch (POT){
 14c:	82 30       	cpi	r24, 0x02	; 2
 14e:	59 f1       	breq	.+86     	; 0x1a6 <__vector_21+0x86>
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	09 f4       	brne	.+2      	; 0x156 <__vector_21+0x36>
 154:	4a c0       	rjmp	.+148    	; 0x1ea <__vector_21+0xca>
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	09 f0       	breq	.+2      	; 0x15c <__vector_21+0x3c>
 15a:	49 c0       	rjmp	.+146    	; 0x1ee <__vector_21+0xce>
		case 1:
			ADMUX &= ~(1<<MUX0);  // Limpiar bit MUX0 primero
 15c:	ec e7       	ldi	r30, 0x7C	; 124
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	8e 7f       	andi	r24, 0xFE	; 254
 164:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX2) | (1<<MUX1);//Selección de canal Bit 6 del puerto C
 166:	80 81       	ld	r24, Z
 168:	86 60       	ori	r24, 0x06	; 6
 16a:	80 83       	st	Z, r24
			ADC1=ADCH;
 16c:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 170:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <ADC1>
			dutyCycle1 = (ADC1 * (188.0 / 255.0)) + 69.0;
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__floatsisf>
 17e:	2d eb       	ldi	r18, 0xBD	; 189
 180:	3c eb       	ldi	r19, 0xBC	; 188
 182:	4c e3       	ldi	r20, 0x3C	; 60
 184:	5f e3       	ldi	r21, 0x3F	; 63
 186:	0e 94 67 02 	call	0x4ce	; 0x4ce <__mulsf3>
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	4a e8       	ldi	r20, 0x8A	; 138
 190:	52 e4       	ldi	r21, 0x42	; 66
 192:	0e 94 3e 01 	call	0x27c	; 0x27c <__addsf3>
 196:	0e 94 aa 01 	call	0x354	; 0x354 <__fixunssfsi>
 19a:	86 2f       	mov	r24, r22
 19c:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <dutyCycle1>
			updateDutyCycle1(dutyCycle1); // Actualizar PWM
 1a0:	0e 94 28 01 	call	0x250	; 0x250 <updateDutyCycle1>
			break;
 1a4:	24 c0       	rjmp	.+72     	; 0x1ee <__vector_21+0xce>
		
		case 2:
			ADMUX |= (1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Selección de canal Bit 7 del puerto C
 1a6:	ec e7       	ldi	r30, 0x7C	; 124
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	87 60       	ori	r24, 0x07	; 7
 1ae:	80 83       	st	Z, r24
			ADC2=ADCH;
 1b0:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1b4:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_end>
			dutyCycle2 = (ADC2 * (188.0 / 255.0)) + 69.0;
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__floatsisf>
 1c2:	2d eb       	ldi	r18, 0xBD	; 189
 1c4:	3c eb       	ldi	r19, 0xBC	; 188
 1c6:	4c e3       	ldi	r20, 0x3C	; 60
 1c8:	5f e3       	ldi	r21, 0x3F	; 63
 1ca:	0e 94 67 02 	call	0x4ce	; 0x4ce <__mulsf3>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	4a e8       	ldi	r20, 0x8A	; 138
 1d4:	52 e4       	ldi	r21, 0x42	; 66
 1d6:	0e 94 3e 01 	call	0x27c	; 0x27c <__addsf3>
 1da:	0e 94 aa 01 	call	0x354	; 0x354 <__fixunssfsi>
 1de:	86 2f       	mov	r24, r22
 1e0:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
			updateDutyCycle1B(dutyCycle2); // Actualizar PWM
 1e4:	0e 94 37 01 	call	0x26e	; 0x26e <updateDutyCycle1B>
			break;
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <__vector_21+0xce>
		
		case 3:
			POT=0;
 1ea:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <POT>
		
		default:
			break;
	}
	 
	ADCSRA |= (1 << ADSC);	//Iniciar nueva conversión
 1ee:	ea e7       	ldi	r30, 0x7A	; 122
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	80 64       	ori	r24, 0x40	; 64
 1f6:	80 83       	st	Z, r24
}
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	7f 91       	pop	r23
 206:	6f 91       	pop	r22
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <initPWM1A>:
#include <avr/io.h>
#include "PWM1.h"

void initPWM1A(){
	
	DDRB |= (1 << DDB1);	//Setear bit 1 del puerto B como salida
 21a:	84 b1       	in	r24, 0x04	; 4
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	84 b9       	out	0x04, r24	; 4
	
	//CONFIGURACIÓN DEL TIMER 1 PARA FAST PWM CON OCR1A COMO TOP
	TCCR1A = 0;
 220:	e0 e8       	ldi	r30, 0x80	; 128
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	10 82       	st	Z, r1
	TCCR1A |= (1 << COM1A1);	//no invertido
 226:	80 81       	ld	r24, Z
 228:	80 68       	ori	r24, 0x80	; 128
 22a:	80 83       	st	Z, r24
	
	//Modo fast PMW y top->OCR1A (MODO 14)
	TCCR1A |= (1 << WGM11);
 22c:	80 81       	ld	r24, Z
 22e:	82 60       	ori	r24, 0x02	; 2
 230:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 232:	e1 e8       	ldi	r30, 0x81	; 129
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	88 61       	ori	r24, 0x18	; 24
 23a:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);	//Prescaler de 8
 23c:	80 81       	ld	r24, Z
 23e:	82 60       	ori	r24, 0x02	; 2
 240:	80 83       	st	Z, r24
	ICR1 = 2499;	//TOP
 242:	83 ec       	ldi	r24, 0xC3	; 195
 244:	99 e0       	ldi	r25, 0x09	; 9
 246:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 24a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 24e:	08 95       	ret

00000250 <updateDutyCycle1>:
	
}

void  updateDutyCycle1(uint8_t duty){
	OCR1A = duty;
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 256:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 25a:	08 95       	ret

0000025c <initPWM1B>:
#include <avr/io.h>
#include "PWM1B.h"

void initPWM1B(){
	
	DDRB |= (1 << DDB2);	//Setear bit 2 del puerto B como salida
 25c:	84 b1       	in	r24, 0x04	; 4
 25e:	84 60       	ori	r24, 0x04	; 4
 260:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1 << COM1B1);	//no invertido	
 262:	e0 e8       	ldi	r30, 0x80	; 128
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	80 62       	ori	r24, 0x20	; 32
 26a:	80 83       	st	Z, r24
 26c:	08 95       	ret

0000026e <updateDutyCycle1B>:
}

void  updateDutyCycle1B(uint8_t duty){
	OCR1B = duty;
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 274:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 278:	08 95       	ret

0000027a <__subsf3>:
 27a:	50 58       	subi	r21, 0x80	; 128

0000027c <__addsf3>:
 27c:	bb 27       	eor	r27, r27
 27e:	aa 27       	eor	r26, r26
 280:	0e 94 55 01 	call	0x2aa	; 0x2aa <__addsf3x>
 284:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__fp_round>
 288:	0e 94 1f 02 	call	0x43e	; 0x43e <__fp_pscA>
 28c:	38 f0       	brcs	.+14     	; 0x29c <__addsf3+0x20>
 28e:	0e 94 26 02 	call	0x44c	; 0x44c <__fp_pscB>
 292:	20 f0       	brcs	.+8      	; 0x29c <__addsf3+0x20>
 294:	39 f4       	brne	.+14     	; 0x2a4 <__addsf3+0x28>
 296:	9f 3f       	cpi	r25, 0xFF	; 255
 298:	19 f4       	brne	.+6      	; 0x2a0 <__addsf3+0x24>
 29a:	26 f4       	brtc	.+8      	; 0x2a4 <__addsf3+0x28>
 29c:	0c 94 1c 02 	jmp	0x438	; 0x438 <__fp_nan>
 2a0:	0e f4       	brtc	.+2      	; 0x2a4 <__addsf3+0x28>
 2a2:	e0 95       	com	r30
 2a4:	e7 fb       	bst	r30, 7
 2a6:	0c 94 16 02 	jmp	0x42c	; 0x42c <__fp_inf>

000002aa <__addsf3x>:
 2aa:	e9 2f       	mov	r30, r25
 2ac:	0e 94 3e 02 	call	0x47c	; 0x47c <__fp_split3>
 2b0:	58 f3       	brcs	.-42     	; 0x288 <__addsf3+0xc>
 2b2:	ba 17       	cp	r27, r26
 2b4:	62 07       	cpc	r22, r18
 2b6:	73 07       	cpc	r23, r19
 2b8:	84 07       	cpc	r24, r20
 2ba:	95 07       	cpc	r25, r21
 2bc:	20 f0       	brcs	.+8      	; 0x2c6 <__addsf3x+0x1c>
 2be:	79 f4       	brne	.+30     	; 0x2de <__addsf3x+0x34>
 2c0:	a6 f5       	brtc	.+104    	; 0x32a <__addsf3x+0x80>
 2c2:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__fp_zero>
 2c6:	0e f4       	brtc	.+2      	; 0x2ca <__addsf3x+0x20>
 2c8:	e0 95       	com	r30
 2ca:	0b 2e       	mov	r0, r27
 2cc:	ba 2f       	mov	r27, r26
 2ce:	a0 2d       	mov	r26, r0
 2d0:	0b 01       	movw	r0, r22
 2d2:	b9 01       	movw	r22, r18
 2d4:	90 01       	movw	r18, r0
 2d6:	0c 01       	movw	r0, r24
 2d8:	ca 01       	movw	r24, r20
 2da:	a0 01       	movw	r20, r0
 2dc:	11 24       	eor	r1, r1
 2de:	ff 27       	eor	r31, r31
 2e0:	59 1b       	sub	r21, r25
 2e2:	99 f0       	breq	.+38     	; 0x30a <__addsf3x+0x60>
 2e4:	59 3f       	cpi	r21, 0xF9	; 249
 2e6:	50 f4       	brcc	.+20     	; 0x2fc <__addsf3x+0x52>
 2e8:	50 3e       	cpi	r21, 0xE0	; 224
 2ea:	68 f1       	brcs	.+90     	; 0x346 <__addsf3x+0x9c>
 2ec:	1a 16       	cp	r1, r26
 2ee:	f0 40       	sbci	r31, 0x00	; 0
 2f0:	a2 2f       	mov	r26, r18
 2f2:	23 2f       	mov	r18, r19
 2f4:	34 2f       	mov	r19, r20
 2f6:	44 27       	eor	r20, r20
 2f8:	58 5f       	subi	r21, 0xF8	; 248
 2fa:	f3 cf       	rjmp	.-26     	; 0x2e2 <__addsf3x+0x38>
 2fc:	46 95       	lsr	r20
 2fe:	37 95       	ror	r19
 300:	27 95       	ror	r18
 302:	a7 95       	ror	r26
 304:	f0 40       	sbci	r31, 0x00	; 0
 306:	53 95       	inc	r21
 308:	c9 f7       	brne	.-14     	; 0x2fc <__addsf3x+0x52>
 30a:	7e f4       	brtc	.+30     	; 0x32a <__addsf3x+0x80>
 30c:	1f 16       	cp	r1, r31
 30e:	ba 0b       	sbc	r27, r26
 310:	62 0b       	sbc	r22, r18
 312:	73 0b       	sbc	r23, r19
 314:	84 0b       	sbc	r24, r20
 316:	ba f0       	brmi	.+46     	; 0x346 <__addsf3x+0x9c>
 318:	91 50       	subi	r25, 0x01	; 1
 31a:	a1 f0       	breq	.+40     	; 0x344 <__addsf3x+0x9a>
 31c:	ff 0f       	add	r31, r31
 31e:	bb 1f       	adc	r27, r27
 320:	66 1f       	adc	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	88 1f       	adc	r24, r24
 326:	c2 f7       	brpl	.-16     	; 0x318 <__addsf3x+0x6e>
 328:	0e c0       	rjmp	.+28     	; 0x346 <__addsf3x+0x9c>
 32a:	ba 0f       	add	r27, r26
 32c:	62 1f       	adc	r22, r18
 32e:	73 1f       	adc	r23, r19
 330:	84 1f       	adc	r24, r20
 332:	48 f4       	brcc	.+18     	; 0x346 <__addsf3x+0x9c>
 334:	87 95       	ror	r24
 336:	77 95       	ror	r23
 338:	67 95       	ror	r22
 33a:	b7 95       	ror	r27
 33c:	f7 95       	ror	r31
 33e:	9e 3f       	cpi	r25, 0xFE	; 254
 340:	08 f0       	brcs	.+2      	; 0x344 <__addsf3x+0x9a>
 342:	b0 cf       	rjmp	.-160    	; 0x2a4 <__addsf3+0x28>
 344:	93 95       	inc	r25
 346:	88 0f       	add	r24, r24
 348:	08 f0       	brcs	.+2      	; 0x34c <__addsf3x+0xa2>
 34a:	99 27       	eor	r25, r25
 34c:	ee 0f       	add	r30, r30
 34e:	97 95       	ror	r25
 350:	87 95       	ror	r24
 352:	08 95       	ret

00000354 <__fixunssfsi>:
 354:	0e 94 46 02 	call	0x48c	; 0x48c <__fp_splitA>
 358:	88 f0       	brcs	.+34     	; 0x37c <__fixunssfsi+0x28>
 35a:	9f 57       	subi	r25, 0x7F	; 127
 35c:	98 f0       	brcs	.+38     	; 0x384 <__fixunssfsi+0x30>
 35e:	b9 2f       	mov	r27, r25
 360:	99 27       	eor	r25, r25
 362:	b7 51       	subi	r27, 0x17	; 23
 364:	b0 f0       	brcs	.+44     	; 0x392 <__fixunssfsi+0x3e>
 366:	e1 f0       	breq	.+56     	; 0x3a0 <__fixunssfsi+0x4c>
 368:	66 0f       	add	r22, r22
 36a:	77 1f       	adc	r23, r23
 36c:	88 1f       	adc	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	1a f0       	brmi	.+6      	; 0x378 <__fixunssfsi+0x24>
 372:	ba 95       	dec	r27
 374:	c9 f7       	brne	.-14     	; 0x368 <__fixunssfsi+0x14>
 376:	14 c0       	rjmp	.+40     	; 0x3a0 <__fixunssfsi+0x4c>
 378:	b1 30       	cpi	r27, 0x01	; 1
 37a:	91 f0       	breq	.+36     	; 0x3a0 <__fixunssfsi+0x4c>
 37c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__fp_zero>
 380:	b1 e0       	ldi	r27, 0x01	; 1
 382:	08 95       	ret
 384:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__fp_zero>
 388:	67 2f       	mov	r22, r23
 38a:	78 2f       	mov	r23, r24
 38c:	88 27       	eor	r24, r24
 38e:	b8 5f       	subi	r27, 0xF8	; 248
 390:	39 f0       	breq	.+14     	; 0x3a0 <__fixunssfsi+0x4c>
 392:	b9 3f       	cpi	r27, 0xF9	; 249
 394:	cc f3       	brlt	.-14     	; 0x388 <__fixunssfsi+0x34>
 396:	86 95       	lsr	r24
 398:	77 95       	ror	r23
 39a:	67 95       	ror	r22
 39c:	b3 95       	inc	r27
 39e:	d9 f7       	brne	.-10     	; 0x396 <__fixunssfsi+0x42>
 3a0:	3e f4       	brtc	.+14     	; 0x3b0 <__fixunssfsi+0x5c>
 3a2:	90 95       	com	r25
 3a4:	80 95       	com	r24
 3a6:	70 95       	com	r23
 3a8:	61 95       	neg	r22
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	8f 4f       	sbci	r24, 0xFF	; 255
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	08 95       	ret

000003b2 <__floatunsisf>:
 3b2:	e8 94       	clt
 3b4:	09 c0       	rjmp	.+18     	; 0x3c8 <__floatsisf+0x12>

000003b6 <__floatsisf>:
 3b6:	97 fb       	bst	r25, 7
 3b8:	3e f4       	brtc	.+14     	; 0x3c8 <__floatsisf+0x12>
 3ba:	90 95       	com	r25
 3bc:	80 95       	com	r24
 3be:	70 95       	com	r23
 3c0:	61 95       	neg	r22
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 3c4:	8f 4f       	sbci	r24, 0xFF	; 255
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	99 23       	and	r25, r25
 3ca:	a9 f0       	breq	.+42     	; 0x3f6 <__floatsisf+0x40>
 3cc:	f9 2f       	mov	r31, r25
 3ce:	96 e9       	ldi	r25, 0x96	; 150
 3d0:	bb 27       	eor	r27, r27
 3d2:	93 95       	inc	r25
 3d4:	f6 95       	lsr	r31
 3d6:	87 95       	ror	r24
 3d8:	77 95       	ror	r23
 3da:	67 95       	ror	r22
 3dc:	b7 95       	ror	r27
 3de:	f1 11       	cpse	r31, r1
 3e0:	f8 cf       	rjmp	.-16     	; 0x3d2 <__floatsisf+0x1c>
 3e2:	fa f4       	brpl	.+62     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3e4:	bb 0f       	add	r27, r27
 3e6:	11 f4       	brne	.+4      	; 0x3ec <__floatsisf+0x36>
 3e8:	60 ff       	sbrs	r22, 0
 3ea:	1b c0       	rjmp	.+54     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3ec:	6f 5f       	subi	r22, 0xFF	; 255
 3ee:	7f 4f       	sbci	r23, 0xFF	; 255
 3f0:	8f 4f       	sbci	r24, 0xFF	; 255
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
 3f4:	16 c0       	rjmp	.+44     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3f6:	88 23       	and	r24, r24
 3f8:	11 f0       	breq	.+4      	; 0x3fe <__floatsisf+0x48>
 3fa:	96 e9       	ldi	r25, 0x96	; 150
 3fc:	11 c0       	rjmp	.+34     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3fe:	77 23       	and	r23, r23
 400:	21 f0       	breq	.+8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 402:	9e e8       	ldi	r25, 0x8E	; 142
 404:	87 2f       	mov	r24, r23
 406:	76 2f       	mov	r23, r22
 408:	05 c0       	rjmp	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 40a:	66 23       	and	r22, r22
 40c:	71 f0       	breq	.+28     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 40e:	96 e8       	ldi	r25, 0x86	; 134
 410:	86 2f       	mov	r24, r22
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	2a f0       	brmi	.+10     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 418:	9a 95       	dec	r25
 41a:	66 0f       	add	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	88 1f       	adc	r24, r24
 420:	da f7       	brpl	.-10     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 422:	88 0f       	add	r24, r24
 424:	96 95       	lsr	r25
 426:	87 95       	ror	r24
 428:	97 f9       	bld	r25, 7
 42a:	08 95       	ret

0000042c <__fp_inf>:
 42c:	97 f9       	bld	r25, 7
 42e:	9f 67       	ori	r25, 0x7F	; 127
 430:	80 e8       	ldi	r24, 0x80	; 128
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	08 95       	ret

00000438 <__fp_nan>:
 438:	9f ef       	ldi	r25, 0xFF	; 255
 43a:	80 ec       	ldi	r24, 0xC0	; 192
 43c:	08 95       	ret

0000043e <__fp_pscA>:
 43e:	00 24       	eor	r0, r0
 440:	0a 94       	dec	r0
 442:	16 16       	cp	r1, r22
 444:	17 06       	cpc	r1, r23
 446:	18 06       	cpc	r1, r24
 448:	09 06       	cpc	r0, r25
 44a:	08 95       	ret

0000044c <__fp_pscB>:
 44c:	00 24       	eor	r0, r0
 44e:	0a 94       	dec	r0
 450:	12 16       	cp	r1, r18
 452:	13 06       	cpc	r1, r19
 454:	14 06       	cpc	r1, r20
 456:	05 06       	cpc	r0, r21
 458:	08 95       	ret

0000045a <__fp_round>:
 45a:	09 2e       	mov	r0, r25
 45c:	03 94       	inc	r0
 45e:	00 0c       	add	r0, r0
 460:	11 f4       	brne	.+4      	; 0x466 <__fp_round+0xc>
 462:	88 23       	and	r24, r24
 464:	52 f0       	brmi	.+20     	; 0x47a <__fp_round+0x20>
 466:	bb 0f       	add	r27, r27
 468:	40 f4       	brcc	.+16     	; 0x47a <__fp_round+0x20>
 46a:	bf 2b       	or	r27, r31
 46c:	11 f4       	brne	.+4      	; 0x472 <__fp_round+0x18>
 46e:	60 ff       	sbrs	r22, 0
 470:	04 c0       	rjmp	.+8      	; 0x47a <__fp_round+0x20>
 472:	6f 5f       	subi	r22, 0xFF	; 255
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	8f 4f       	sbci	r24, 0xFF	; 255
 478:	9f 4f       	sbci	r25, 0xFF	; 255
 47a:	08 95       	ret

0000047c <__fp_split3>:
 47c:	57 fd       	sbrc	r21, 7
 47e:	90 58       	subi	r25, 0x80	; 128
 480:	44 0f       	add	r20, r20
 482:	55 1f       	adc	r21, r21
 484:	59 f0       	breq	.+22     	; 0x49c <__fp_splitA+0x10>
 486:	5f 3f       	cpi	r21, 0xFF	; 255
 488:	71 f0       	breq	.+28     	; 0x4a6 <__fp_splitA+0x1a>
 48a:	47 95       	ror	r20

0000048c <__fp_splitA>:
 48c:	88 0f       	add	r24, r24
 48e:	97 fb       	bst	r25, 7
 490:	99 1f       	adc	r25, r25
 492:	61 f0       	breq	.+24     	; 0x4ac <__fp_splitA+0x20>
 494:	9f 3f       	cpi	r25, 0xFF	; 255
 496:	79 f0       	breq	.+30     	; 0x4b6 <__fp_splitA+0x2a>
 498:	87 95       	ror	r24
 49a:	08 95       	ret
 49c:	12 16       	cp	r1, r18
 49e:	13 06       	cpc	r1, r19
 4a0:	14 06       	cpc	r1, r20
 4a2:	55 1f       	adc	r21, r21
 4a4:	f2 cf       	rjmp	.-28     	; 0x48a <__fp_split3+0xe>
 4a6:	46 95       	lsr	r20
 4a8:	f1 df       	rcall	.-30     	; 0x48c <__fp_splitA>
 4aa:	08 c0       	rjmp	.+16     	; 0x4bc <__fp_splitA+0x30>
 4ac:	16 16       	cp	r1, r22
 4ae:	17 06       	cpc	r1, r23
 4b0:	18 06       	cpc	r1, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	f1 cf       	rjmp	.-30     	; 0x498 <__fp_splitA+0xc>
 4b6:	86 95       	lsr	r24
 4b8:	71 05       	cpc	r23, r1
 4ba:	61 05       	cpc	r22, r1
 4bc:	08 94       	sec
 4be:	08 95       	ret

000004c0 <__fp_zero>:
 4c0:	e8 94       	clt

000004c2 <__fp_szero>:
 4c2:	bb 27       	eor	r27, r27
 4c4:	66 27       	eor	r22, r22
 4c6:	77 27       	eor	r23, r23
 4c8:	cb 01       	movw	r24, r22
 4ca:	97 f9       	bld	r25, 7
 4cc:	08 95       	ret

000004ce <__mulsf3>:
 4ce:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__mulsf3x>
 4d2:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__fp_round>
 4d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__fp_pscA>
 4da:	38 f0       	brcs	.+14     	; 0x4ea <__mulsf3+0x1c>
 4dc:	0e 94 26 02 	call	0x44c	; 0x44c <__fp_pscB>
 4e0:	20 f0       	brcs	.+8      	; 0x4ea <__mulsf3+0x1c>
 4e2:	95 23       	and	r25, r21
 4e4:	11 f0       	breq	.+4      	; 0x4ea <__mulsf3+0x1c>
 4e6:	0c 94 16 02 	jmp	0x42c	; 0x42c <__fp_inf>
 4ea:	0c 94 1c 02 	jmp	0x438	; 0x438 <__fp_nan>
 4ee:	11 24       	eor	r1, r1
 4f0:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_szero>

000004f4 <__mulsf3x>:
 4f4:	0e 94 3e 02 	call	0x47c	; 0x47c <__fp_split3>
 4f8:	70 f3       	brcs	.-36     	; 0x4d6 <__mulsf3+0x8>

000004fa <__mulsf3_pse>:
 4fa:	95 9f       	mul	r25, r21
 4fc:	c1 f3       	breq	.-16     	; 0x4ee <__mulsf3+0x20>
 4fe:	95 0f       	add	r25, r21
 500:	50 e0       	ldi	r21, 0x00	; 0
 502:	55 1f       	adc	r21, r21
 504:	62 9f       	mul	r22, r18
 506:	f0 01       	movw	r30, r0
 508:	72 9f       	mul	r23, r18
 50a:	bb 27       	eor	r27, r27
 50c:	f0 0d       	add	r31, r0
 50e:	b1 1d       	adc	r27, r1
 510:	63 9f       	mul	r22, r19
 512:	aa 27       	eor	r26, r26
 514:	f0 0d       	add	r31, r0
 516:	b1 1d       	adc	r27, r1
 518:	aa 1f       	adc	r26, r26
 51a:	64 9f       	mul	r22, r20
 51c:	66 27       	eor	r22, r22
 51e:	b0 0d       	add	r27, r0
 520:	a1 1d       	adc	r26, r1
 522:	66 1f       	adc	r22, r22
 524:	82 9f       	mul	r24, r18
 526:	22 27       	eor	r18, r18
 528:	b0 0d       	add	r27, r0
 52a:	a1 1d       	adc	r26, r1
 52c:	62 1f       	adc	r22, r18
 52e:	73 9f       	mul	r23, r19
 530:	b0 0d       	add	r27, r0
 532:	a1 1d       	adc	r26, r1
 534:	62 1f       	adc	r22, r18
 536:	83 9f       	mul	r24, r19
 538:	a0 0d       	add	r26, r0
 53a:	61 1d       	adc	r22, r1
 53c:	22 1f       	adc	r18, r18
 53e:	74 9f       	mul	r23, r20
 540:	33 27       	eor	r19, r19
 542:	a0 0d       	add	r26, r0
 544:	61 1d       	adc	r22, r1
 546:	23 1f       	adc	r18, r19
 548:	84 9f       	mul	r24, r20
 54a:	60 0d       	add	r22, r0
 54c:	21 1d       	adc	r18, r1
 54e:	82 2f       	mov	r24, r18
 550:	76 2f       	mov	r23, r22
 552:	6a 2f       	mov	r22, r26
 554:	11 24       	eor	r1, r1
 556:	9f 57       	subi	r25, 0x7F	; 127
 558:	50 40       	sbci	r21, 0x00	; 0
 55a:	9a f0       	brmi	.+38     	; 0x582 <__mulsf3_pse+0x88>
 55c:	f1 f0       	breq	.+60     	; 0x59a <__mulsf3_pse+0xa0>
 55e:	88 23       	and	r24, r24
 560:	4a f0       	brmi	.+18     	; 0x574 <__mulsf3_pse+0x7a>
 562:	ee 0f       	add	r30, r30
 564:	ff 1f       	adc	r31, r31
 566:	bb 1f       	adc	r27, r27
 568:	66 1f       	adc	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	88 1f       	adc	r24, r24
 56e:	91 50       	subi	r25, 0x01	; 1
 570:	50 40       	sbci	r21, 0x00	; 0
 572:	a9 f7       	brne	.-22     	; 0x55e <__mulsf3_pse+0x64>
 574:	9e 3f       	cpi	r25, 0xFE	; 254
 576:	51 05       	cpc	r21, r1
 578:	80 f0       	brcs	.+32     	; 0x59a <__mulsf3_pse+0xa0>
 57a:	0c 94 16 02 	jmp	0x42c	; 0x42c <__fp_inf>
 57e:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_szero>
 582:	5f 3f       	cpi	r21, 0xFF	; 255
 584:	e4 f3       	brlt	.-8      	; 0x57e <__mulsf3_pse+0x84>
 586:	98 3e       	cpi	r25, 0xE8	; 232
 588:	d4 f3       	brlt	.-12     	; 0x57e <__mulsf3_pse+0x84>
 58a:	86 95       	lsr	r24
 58c:	77 95       	ror	r23
 58e:	67 95       	ror	r22
 590:	b7 95       	ror	r27
 592:	f7 95       	ror	r31
 594:	e7 95       	ror	r30
 596:	9f 5f       	subi	r25, 0xFF	; 255
 598:	c1 f7       	brne	.-16     	; 0x58a <__mulsf3_pse+0x90>
 59a:	fe 2b       	or	r31, r30
 59c:	88 0f       	add	r24, r24
 59e:	91 1d       	adc	r25, r1
 5a0:	96 95       	lsr	r25
 5a2:	87 95       	ror	r24
 5a4:	97 f9       	bld	r25, 7
 5a6:	08 95       	ret

000005a8 <_exit>:
 5a8:	f8 94       	cli

000005aa <__stop_program>:
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <__stop_program>

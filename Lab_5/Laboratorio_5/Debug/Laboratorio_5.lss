
Laboratorio_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000005e0  00000674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  00000676  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ad  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ed  00000000  00000000  0000112d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000558  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044a  00000000  00000000  00001fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000167  00000000  00000000  000023fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002565  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  9e:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <INIT_ADC>:

}


void INIT_ADC(){
	ADMUX = 0;	//Apagar todo
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	
	//Voltaje de referencia 5V
	ADMUX |=(1<<REFS0);
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); //orientación (izquierda)
  b2:	80 81       	ld	r24, Z
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	80 83       	st	Z, r24
	//ADMUX |= (1<<MUX2) | (1<<MUX1);//Selección de canal Bit 6 del puerto C
	
	ADCSRA = 0;	//Apagar todo
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	10 82       	st	Z, r1
	ADCSRA |=(1<<ADPS1)	| (1 << ADPS0); //Configuración del presacaler 8
  be:	80 81       	ld	r24, Z
  c0:	83 60       	ori	r24, 0x03	; 3
  c2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//Habilitación de interrupciones
  c4:	80 81       	ld	r24, Z
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	//Habilitar ADS
  ca:	80 81       	ld	r24, Z
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	80 83       	st	Z, r24
  d0:	08 95       	ret

000000d2 <INIT_TMR0>:
}

void INIT_TMR0(){
	//Configurarlo en modo normal 
	TCCR0A = 0x00; 
  d2:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);   //Prescaler 64
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0xB1;	//Desborde cada 0.5ms
  d8:	81 eb       	ldi	r24, 0xB1	; 177
  da:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1 << TOIE0);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  e2:	08 95       	ret

000000e4 <setup>:
		
	}
}

void setup(){
	cli();	//Desabilitar interrupciones
  e4:	f8 94       	cli
	//INIT_TMR1();	//Llamar a la configuración del timer
	INIT_ADC();
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <INIT_ADC>
	initPWM1A();
  ea:	0e 94 27 01 	call	0x24e	; 0x24e <initPWM1A>
	initPWM1B();
  ee:	0e 94 48 01 	call	0x290	; 0x290 <initPWM1B>
	INIT_TMR0();
  f2:	0e 94 69 00 	call	0xd2	; 0xd2 <INIT_TMR0>
	DDRB|=(1 << PORTB0);
  f6:	84 b1       	in	r24, 0x04	; 4
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	84 b9       	out	0x04, r24	; 4
	CLKPR = (1 << CLKPCE); //Habilita cambios de prescaler
  fc:	e1 e6       	ldi	r30, 0x61	; 97
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	80 83       	st	Z, r24
	CLKPR = (1 << CLKPS2);	// 1MHz
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	80 83       	st	Z, r24
	UCSR0B=0;	//Apagar los bit 0 y 1 del puerto D
 108:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	sei();		//Habilita cambios de interrupción
 10c:	78 94       	sei
	
	ADCSRA |= (1 << ADSC); // Iniciar primera conversión
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 64       	ori	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
 118:	08 95       	ret

0000011a <main>:
void INIT_TMR0();
void INIT_ADC();

int main(void)
{
	setup();
 11a:	0e 94 72 00 	call	0xe4	; 0xe4 <setup>
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x4>

00000120 <__vector_21>:
}

/*************VECTOR DE INTERRUPCIÓN************/

ISR(ADC_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	switch (POT){
 142:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <POT>
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	19 f0       	breq	.+6      	; 0x150 <__vector_21+0x30>
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	f1 f0       	breq	.+60     	; 0x18a <__vector_21+0x6a>
 14e:	39 c0       	rjmp	.+114    	; 0x1c2 <__vector_21+0xa2>
		case 1:
			ADC1=ADCH;
 150:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 154:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <ADC1>
			dutyCycle1 = (ADC1 * (225.0 / 255.0)) + 60.0;
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__floatsisf>
 162:	22 ee       	ldi	r18, 0xE2	; 226
 164:	31 ee       	ldi	r19, 0xE1	; 225
 166:	41 e6       	ldi	r20, 0x61	; 97
 168:	5f e3       	ldi	r21, 0x3F	; 63
 16a:	0e 94 81 02 	call	0x502	; 0x502 <__mulsf3>
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	40 e7       	ldi	r20, 0x70	; 112
 174:	52 e4       	ldi	r21, 0x42	; 66
 176:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__addsf3>
 17a:	0e 94 c4 01 	call	0x388	; 0x388 <__fixunssfsi>
 17e:	86 2f       	mov	r24, r22
 180:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <dutyCycle1>
			updateDutyCycle1(dutyCycle1); // Actualizar PWM
 184:	0e 94 42 01 	call	0x284	; 0x284 <updateDutyCycle1>
			break;
 188:	1c c0       	rjmp	.+56     	; 0x1c2 <__vector_21+0xa2>
			
		case 2:
			ADC2=ADCH;
 18a:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 18e:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_end>
			dutyCycle2 = (ADC2 * (225.0 / 255.0)) + 60.0;
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__floatsisf>
 19c:	22 ee       	ldi	r18, 0xE2	; 226
 19e:	31 ee       	ldi	r19, 0xE1	; 225
 1a0:	41 e6       	ldi	r20, 0x61	; 97
 1a2:	5f e3       	ldi	r21, 0x3F	; 63
 1a4:	0e 94 81 02 	call	0x502	; 0x502 <__mulsf3>
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	40 e7       	ldi	r20, 0x70	; 112
 1ae:	52 e4       	ldi	r21, 0x42	; 66
 1b0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__addsf3>
 1b4:	0e 94 c4 01 	call	0x388	; 0x388 <__fixunssfsi>
 1b8:	86 2f       	mov	r24, r22
 1ba:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
			updateDutyCycle1B(dutyCycle2); // Actualizar PWM
 1be:	0e 94 51 01 	call	0x2a2	; 0x2a2 <updateDutyCycle1B>
	
	//uint8_t temporal = ADCH;
	// Mapear ADC (0-255) a dutyCycle
	//PORTB= temporal; 
	 
	ADCSRA |= (1 << ADSC);	//Iniciar nueva conversión
 1c2:	ea e7       	ldi	r30, 0x7A	; 122
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	80 83       	st	Z, r24
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	bf 91       	pop	r27
 1d2:	af 91       	pop	r26
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	7f 91       	pop	r23
 1da:	6f 91       	pop	r22
 1dc:	5f 91       	pop	r21
 1de:	4f 91       	pop	r20
 1e0:	3f 91       	pop	r19
 1e2:	2f 91       	pop	r18
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <__vector_16>:

ISR (TIMER0_OVF_vect){
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	8f 93       	push	r24
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
	POT++;
 1fe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <POT>
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <POT>
	
	switch (POT){
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	69 f0       	breq	.+26     	; 0x226 <__vector_16+0x38>
 20c:	83 30       	cpi	r24, 0x03	; 3
 20e:	89 f0       	breq	.+34     	; 0x232 <__vector_16+0x44>
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	89 f4       	brne	.+34     	; 0x236 <__vector_16+0x48>
		case 1:
			ADMUX &= ~(1<<MUX0);  // Limpiar bit MUX0 primero
 214:	ec e7       	ldi	r30, 0x7C	; 124
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	8e 7f       	andi	r24, 0xFE	; 254
 21c:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX2) | (1<<MUX1);//Selección de canal Bit 6 del puerto C
 21e:	80 81       	ld	r24, Z
 220:	86 60       	ori	r24, 0x06	; 6
 222:	80 83       	st	Z, r24
			break;
 224:	08 c0       	rjmp	.+16     	; 0x236 <__vector_16+0x48>
		
		case 2:
			ADMUX |= (1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Selección de canal Bit 7 del puerto C
 226:	ec e7       	ldi	r30, 0x7C	; 124
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	87 60       	ori	r24, 0x07	; 7
 22e:	80 83       	st	Z, r24
			break;
 230:	02 c0       	rjmp	.+4      	; 0x236 <__vector_16+0x48>
		
		case 3:
			POT=0;
 232:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <POT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	8a e6       	ldi	r24, 0x6A	; 106
 238:	8a 95       	dec	r24
 23a:	f1 f7       	brne	.-4      	; 0x238 <__vector_16+0x4a>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <__vector_16+0x50>
		
		default:
			break;
	}
	_delay_us(20);  // Pequeño delay para estabilización
}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	8f 91       	pop	r24
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <initPWM1A>:
#include <avr/io.h>
#include "PWM1.h"

void initPWM1A(){
	
	DDRB |= (1 << DDB1);	//Setear bit 1 del puerto B como salida
 24e:	84 b1       	in	r24, 0x04	; 4
 250:	82 60       	ori	r24, 0x02	; 2
 252:	84 b9       	out	0x04, r24	; 4
	
	//CONFIGURACIÓN DEL TIMER 1 PARA FAST PWM CON OCR1A COMO TOP
	TCCR1A = 0;
 254:	e0 e8       	ldi	r30, 0x80	; 128
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	10 82       	st	Z, r1
	TCCR1A |= (1 << COM1A1);	//no invertido
 25a:	80 81       	ld	r24, Z
 25c:	80 68       	ori	r24, 0x80	; 128
 25e:	80 83       	st	Z, r24
	
	//Modo fast PMW y top->OCR1A (MODO 14)
	TCCR1A |= (1 << WGM11);
 260:	80 81       	ld	r24, Z
 262:	82 60       	ori	r24, 0x02	; 2
 264:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 266:	e1 e8       	ldi	r30, 0x81	; 129
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	88 61       	ori	r24, 0x18	; 24
 26e:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);	//Prescaler de 8
 270:	80 81       	ld	r24, Z
 272:	82 60       	ori	r24, 0x02	; 2
 274:	80 83       	st	Z, r24
	ICR1 = 2499;	//TOP
 276:	83 ec       	ldi	r24, 0xC3	; 195
 278:	99 e0       	ldi	r25, 0x09	; 9
 27a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 27e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 282:	08 95       	ret

00000284 <updateDutyCycle1>:
	
}

void  updateDutyCycle1(uint8_t duty){
	OCR1A = duty;
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 28a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 28e:	08 95       	ret

00000290 <initPWM1B>:
#include <avr/io.h>
#include "PWM1B.h"

void initPWM1B(){
	
	DDRB |= (1 << DDB2);	//Setear bit 2 del puerto B como salida
 290:	84 b1       	in	r24, 0x04	; 4
 292:	84 60       	ori	r24, 0x04	; 4
 294:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1 << COM1B1);	//no invertido	
 296:	e0 e8       	ldi	r30, 0x80	; 128
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	80 62       	ori	r24, 0x20	; 32
 29e:	80 83       	st	Z, r24
 2a0:	08 95       	ret

000002a2 <updateDutyCycle1B>:
}

void  updateDutyCycle1B(uint8_t duty){
	OCR1B = duty;
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2a8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 2ac:	08 95       	ret

000002ae <__subsf3>:
 2ae:	50 58       	subi	r21, 0x80	; 128

000002b0 <__addsf3>:
 2b0:	bb 27       	eor	r27, r27
 2b2:	aa 27       	eor	r26, r26
 2b4:	0e 94 6f 01 	call	0x2de	; 0x2de <__addsf3x>
 2b8:	0c 94 47 02 	jmp	0x48e	; 0x48e <__fp_round>
 2bc:	0e 94 39 02 	call	0x472	; 0x472 <__fp_pscA>
 2c0:	38 f0       	brcs	.+14     	; 0x2d0 <__addsf3+0x20>
 2c2:	0e 94 40 02 	call	0x480	; 0x480 <__fp_pscB>
 2c6:	20 f0       	brcs	.+8      	; 0x2d0 <__addsf3+0x20>
 2c8:	39 f4       	brne	.+14     	; 0x2d8 <__addsf3+0x28>
 2ca:	9f 3f       	cpi	r25, 0xFF	; 255
 2cc:	19 f4       	brne	.+6      	; 0x2d4 <__addsf3+0x24>
 2ce:	26 f4       	brtc	.+8      	; 0x2d8 <__addsf3+0x28>
 2d0:	0c 94 36 02 	jmp	0x46c	; 0x46c <__fp_nan>
 2d4:	0e f4       	brtc	.+2      	; 0x2d8 <__addsf3+0x28>
 2d6:	e0 95       	com	r30
 2d8:	e7 fb       	bst	r30, 7
 2da:	0c 94 30 02 	jmp	0x460	; 0x460 <__fp_inf>

000002de <__addsf3x>:
 2de:	e9 2f       	mov	r30, r25
 2e0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__fp_split3>
 2e4:	58 f3       	brcs	.-42     	; 0x2bc <__addsf3+0xc>
 2e6:	ba 17       	cp	r27, r26
 2e8:	62 07       	cpc	r22, r18
 2ea:	73 07       	cpc	r23, r19
 2ec:	84 07       	cpc	r24, r20
 2ee:	95 07       	cpc	r25, r21
 2f0:	20 f0       	brcs	.+8      	; 0x2fa <__addsf3x+0x1c>
 2f2:	79 f4       	brne	.+30     	; 0x312 <__addsf3x+0x34>
 2f4:	a6 f5       	brtc	.+104    	; 0x35e <__addsf3x+0x80>
 2f6:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__fp_zero>
 2fa:	0e f4       	brtc	.+2      	; 0x2fe <__addsf3x+0x20>
 2fc:	e0 95       	com	r30
 2fe:	0b 2e       	mov	r0, r27
 300:	ba 2f       	mov	r27, r26
 302:	a0 2d       	mov	r26, r0
 304:	0b 01       	movw	r0, r22
 306:	b9 01       	movw	r22, r18
 308:	90 01       	movw	r18, r0
 30a:	0c 01       	movw	r0, r24
 30c:	ca 01       	movw	r24, r20
 30e:	a0 01       	movw	r20, r0
 310:	11 24       	eor	r1, r1
 312:	ff 27       	eor	r31, r31
 314:	59 1b       	sub	r21, r25
 316:	99 f0       	breq	.+38     	; 0x33e <__addsf3x+0x60>
 318:	59 3f       	cpi	r21, 0xF9	; 249
 31a:	50 f4       	brcc	.+20     	; 0x330 <__addsf3x+0x52>
 31c:	50 3e       	cpi	r21, 0xE0	; 224
 31e:	68 f1       	brcs	.+90     	; 0x37a <__addsf3x+0x9c>
 320:	1a 16       	cp	r1, r26
 322:	f0 40       	sbci	r31, 0x00	; 0
 324:	a2 2f       	mov	r26, r18
 326:	23 2f       	mov	r18, r19
 328:	34 2f       	mov	r19, r20
 32a:	44 27       	eor	r20, r20
 32c:	58 5f       	subi	r21, 0xF8	; 248
 32e:	f3 cf       	rjmp	.-26     	; 0x316 <__addsf3x+0x38>
 330:	46 95       	lsr	r20
 332:	37 95       	ror	r19
 334:	27 95       	ror	r18
 336:	a7 95       	ror	r26
 338:	f0 40       	sbci	r31, 0x00	; 0
 33a:	53 95       	inc	r21
 33c:	c9 f7       	brne	.-14     	; 0x330 <__addsf3x+0x52>
 33e:	7e f4       	brtc	.+30     	; 0x35e <__addsf3x+0x80>
 340:	1f 16       	cp	r1, r31
 342:	ba 0b       	sbc	r27, r26
 344:	62 0b       	sbc	r22, r18
 346:	73 0b       	sbc	r23, r19
 348:	84 0b       	sbc	r24, r20
 34a:	ba f0       	brmi	.+46     	; 0x37a <__addsf3x+0x9c>
 34c:	91 50       	subi	r25, 0x01	; 1
 34e:	a1 f0       	breq	.+40     	; 0x378 <__addsf3x+0x9a>
 350:	ff 0f       	add	r31, r31
 352:	bb 1f       	adc	r27, r27
 354:	66 1f       	adc	r22, r22
 356:	77 1f       	adc	r23, r23
 358:	88 1f       	adc	r24, r24
 35a:	c2 f7       	brpl	.-16     	; 0x34c <__addsf3x+0x6e>
 35c:	0e c0       	rjmp	.+28     	; 0x37a <__addsf3x+0x9c>
 35e:	ba 0f       	add	r27, r26
 360:	62 1f       	adc	r22, r18
 362:	73 1f       	adc	r23, r19
 364:	84 1f       	adc	r24, r20
 366:	48 f4       	brcc	.+18     	; 0x37a <__addsf3x+0x9c>
 368:	87 95       	ror	r24
 36a:	77 95       	ror	r23
 36c:	67 95       	ror	r22
 36e:	b7 95       	ror	r27
 370:	f7 95       	ror	r31
 372:	9e 3f       	cpi	r25, 0xFE	; 254
 374:	08 f0       	brcs	.+2      	; 0x378 <__addsf3x+0x9a>
 376:	b0 cf       	rjmp	.-160    	; 0x2d8 <__addsf3+0x28>
 378:	93 95       	inc	r25
 37a:	88 0f       	add	r24, r24
 37c:	08 f0       	brcs	.+2      	; 0x380 <__addsf3x+0xa2>
 37e:	99 27       	eor	r25, r25
 380:	ee 0f       	add	r30, r30
 382:	97 95       	ror	r25
 384:	87 95       	ror	r24
 386:	08 95       	ret

00000388 <__fixunssfsi>:
 388:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__fp_splitA>
 38c:	88 f0       	brcs	.+34     	; 0x3b0 <__fixunssfsi+0x28>
 38e:	9f 57       	subi	r25, 0x7F	; 127
 390:	98 f0       	brcs	.+38     	; 0x3b8 <__fixunssfsi+0x30>
 392:	b9 2f       	mov	r27, r25
 394:	99 27       	eor	r25, r25
 396:	b7 51       	subi	r27, 0x17	; 23
 398:	b0 f0       	brcs	.+44     	; 0x3c6 <__fixunssfsi+0x3e>
 39a:	e1 f0       	breq	.+56     	; 0x3d4 <__fixunssfsi+0x4c>
 39c:	66 0f       	add	r22, r22
 39e:	77 1f       	adc	r23, r23
 3a0:	88 1f       	adc	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	1a f0       	brmi	.+6      	; 0x3ac <__fixunssfsi+0x24>
 3a6:	ba 95       	dec	r27
 3a8:	c9 f7       	brne	.-14     	; 0x39c <__fixunssfsi+0x14>
 3aa:	14 c0       	rjmp	.+40     	; 0x3d4 <__fixunssfsi+0x4c>
 3ac:	b1 30       	cpi	r27, 0x01	; 1
 3ae:	91 f0       	breq	.+36     	; 0x3d4 <__fixunssfsi+0x4c>
 3b0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__fp_zero>
 3b4:	b1 e0       	ldi	r27, 0x01	; 1
 3b6:	08 95       	ret
 3b8:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__fp_zero>
 3bc:	67 2f       	mov	r22, r23
 3be:	78 2f       	mov	r23, r24
 3c0:	88 27       	eor	r24, r24
 3c2:	b8 5f       	subi	r27, 0xF8	; 248
 3c4:	39 f0       	breq	.+14     	; 0x3d4 <__fixunssfsi+0x4c>
 3c6:	b9 3f       	cpi	r27, 0xF9	; 249
 3c8:	cc f3       	brlt	.-14     	; 0x3bc <__fixunssfsi+0x34>
 3ca:	86 95       	lsr	r24
 3cc:	77 95       	ror	r23
 3ce:	67 95       	ror	r22
 3d0:	b3 95       	inc	r27
 3d2:	d9 f7       	brne	.-10     	; 0x3ca <__fixunssfsi+0x42>
 3d4:	3e f4       	brtc	.+14     	; 0x3e4 <__fixunssfsi+0x5c>
 3d6:	90 95       	com	r25
 3d8:	80 95       	com	r24
 3da:	70 95       	com	r23
 3dc:	61 95       	neg	r22
 3de:	7f 4f       	sbci	r23, 0xFF	; 255
 3e0:	8f 4f       	sbci	r24, 0xFF	; 255
 3e2:	9f 4f       	sbci	r25, 0xFF	; 255
 3e4:	08 95       	ret

000003e6 <__floatunsisf>:
 3e6:	e8 94       	clt
 3e8:	09 c0       	rjmp	.+18     	; 0x3fc <__floatsisf+0x12>

000003ea <__floatsisf>:
 3ea:	97 fb       	bst	r25, 7
 3ec:	3e f4       	brtc	.+14     	; 0x3fc <__floatsisf+0x12>
 3ee:	90 95       	com	r25
 3f0:	80 95       	com	r24
 3f2:	70 95       	com	r23
 3f4:	61 95       	neg	r22
 3f6:	7f 4f       	sbci	r23, 0xFF	; 255
 3f8:	8f 4f       	sbci	r24, 0xFF	; 255
 3fa:	9f 4f       	sbci	r25, 0xFF	; 255
 3fc:	99 23       	and	r25, r25
 3fe:	a9 f0       	breq	.+42     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 400:	f9 2f       	mov	r31, r25
 402:	96 e9       	ldi	r25, 0x96	; 150
 404:	bb 27       	eor	r27, r27
 406:	93 95       	inc	r25
 408:	f6 95       	lsr	r31
 40a:	87 95       	ror	r24
 40c:	77 95       	ror	r23
 40e:	67 95       	ror	r22
 410:	b7 95       	ror	r27
 412:	f1 11       	cpse	r31, r1
 414:	f8 cf       	rjmp	.-16     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 416:	fa f4       	brpl	.+62     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 418:	bb 0f       	add	r27, r27
 41a:	11 f4       	brne	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	60 ff       	sbrs	r22, 0
 41e:	1b c0       	rjmp	.+54     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 420:	6f 5f       	subi	r22, 0xFF	; 255
 422:	7f 4f       	sbci	r23, 0xFF	; 255
 424:	8f 4f       	sbci	r24, 0xFF	; 255
 426:	9f 4f       	sbci	r25, 0xFF	; 255
 428:	16 c0       	rjmp	.+44     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 42a:	88 23       	and	r24, r24
 42c:	11 f0       	breq	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	96 e9       	ldi	r25, 0x96	; 150
 430:	11 c0       	rjmp	.+34     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 432:	77 23       	and	r23, r23
 434:	21 f0       	breq	.+8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 436:	9e e8       	ldi	r25, 0x8E	; 142
 438:	87 2f       	mov	r24, r23
 43a:	76 2f       	mov	r23, r22
 43c:	05 c0       	rjmp	.+10     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 43e:	66 23       	and	r22, r22
 440:	71 f0       	breq	.+28     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 442:	96 e8       	ldi	r25, 0x86	; 134
 444:	86 2f       	mov	r24, r22
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	2a f0       	brmi	.+10     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 44c:	9a 95       	dec	r25
 44e:	66 0f       	add	r22, r22
 450:	77 1f       	adc	r23, r23
 452:	88 1f       	adc	r24, r24
 454:	da f7       	brpl	.-10     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 456:	88 0f       	add	r24, r24
 458:	96 95       	lsr	r25
 45a:	87 95       	ror	r24
 45c:	97 f9       	bld	r25, 7
 45e:	08 95       	ret

00000460 <__fp_inf>:
 460:	97 f9       	bld	r25, 7
 462:	9f 67       	ori	r25, 0x7F	; 127
 464:	80 e8       	ldi	r24, 0x80	; 128
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	08 95       	ret

0000046c <__fp_nan>:
 46c:	9f ef       	ldi	r25, 0xFF	; 255
 46e:	80 ec       	ldi	r24, 0xC0	; 192
 470:	08 95       	ret

00000472 <__fp_pscA>:
 472:	00 24       	eor	r0, r0
 474:	0a 94       	dec	r0
 476:	16 16       	cp	r1, r22
 478:	17 06       	cpc	r1, r23
 47a:	18 06       	cpc	r1, r24
 47c:	09 06       	cpc	r0, r25
 47e:	08 95       	ret

00000480 <__fp_pscB>:
 480:	00 24       	eor	r0, r0
 482:	0a 94       	dec	r0
 484:	12 16       	cp	r1, r18
 486:	13 06       	cpc	r1, r19
 488:	14 06       	cpc	r1, r20
 48a:	05 06       	cpc	r0, r21
 48c:	08 95       	ret

0000048e <__fp_round>:
 48e:	09 2e       	mov	r0, r25
 490:	03 94       	inc	r0
 492:	00 0c       	add	r0, r0
 494:	11 f4       	brne	.+4      	; 0x49a <__fp_round+0xc>
 496:	88 23       	and	r24, r24
 498:	52 f0       	brmi	.+20     	; 0x4ae <__fp_round+0x20>
 49a:	bb 0f       	add	r27, r27
 49c:	40 f4       	brcc	.+16     	; 0x4ae <__fp_round+0x20>
 49e:	bf 2b       	or	r27, r31
 4a0:	11 f4       	brne	.+4      	; 0x4a6 <__fp_round+0x18>
 4a2:	60 ff       	sbrs	r22, 0
 4a4:	04 c0       	rjmp	.+8      	; 0x4ae <__fp_round+0x20>
 4a6:	6f 5f       	subi	r22, 0xFF	; 255
 4a8:	7f 4f       	sbci	r23, 0xFF	; 255
 4aa:	8f 4f       	sbci	r24, 0xFF	; 255
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
 4ae:	08 95       	ret

000004b0 <__fp_split3>:
 4b0:	57 fd       	sbrc	r21, 7
 4b2:	90 58       	subi	r25, 0x80	; 128
 4b4:	44 0f       	add	r20, r20
 4b6:	55 1f       	adc	r21, r21
 4b8:	59 f0       	breq	.+22     	; 0x4d0 <__fp_splitA+0x10>
 4ba:	5f 3f       	cpi	r21, 0xFF	; 255
 4bc:	71 f0       	breq	.+28     	; 0x4da <__fp_splitA+0x1a>
 4be:	47 95       	ror	r20

000004c0 <__fp_splitA>:
 4c0:	88 0f       	add	r24, r24
 4c2:	97 fb       	bst	r25, 7
 4c4:	99 1f       	adc	r25, r25
 4c6:	61 f0       	breq	.+24     	; 0x4e0 <__fp_splitA+0x20>
 4c8:	9f 3f       	cpi	r25, 0xFF	; 255
 4ca:	79 f0       	breq	.+30     	; 0x4ea <__fp_splitA+0x2a>
 4cc:	87 95       	ror	r24
 4ce:	08 95       	ret
 4d0:	12 16       	cp	r1, r18
 4d2:	13 06       	cpc	r1, r19
 4d4:	14 06       	cpc	r1, r20
 4d6:	55 1f       	adc	r21, r21
 4d8:	f2 cf       	rjmp	.-28     	; 0x4be <__fp_split3+0xe>
 4da:	46 95       	lsr	r20
 4dc:	f1 df       	rcall	.-30     	; 0x4c0 <__fp_splitA>
 4de:	08 c0       	rjmp	.+16     	; 0x4f0 <__fp_splitA+0x30>
 4e0:	16 16       	cp	r1, r22
 4e2:	17 06       	cpc	r1, r23
 4e4:	18 06       	cpc	r1, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	f1 cf       	rjmp	.-30     	; 0x4cc <__fp_splitA+0xc>
 4ea:	86 95       	lsr	r24
 4ec:	71 05       	cpc	r23, r1
 4ee:	61 05       	cpc	r22, r1
 4f0:	08 94       	sec
 4f2:	08 95       	ret

000004f4 <__fp_zero>:
 4f4:	e8 94       	clt

000004f6 <__fp_szero>:
 4f6:	bb 27       	eor	r27, r27
 4f8:	66 27       	eor	r22, r22
 4fa:	77 27       	eor	r23, r23
 4fc:	cb 01       	movw	r24, r22
 4fe:	97 f9       	bld	r25, 7
 500:	08 95       	ret

00000502 <__mulsf3>:
 502:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3x>
 506:	0c 94 47 02 	jmp	0x48e	; 0x48e <__fp_round>
 50a:	0e 94 39 02 	call	0x472	; 0x472 <__fp_pscA>
 50e:	38 f0       	brcs	.+14     	; 0x51e <__mulsf3+0x1c>
 510:	0e 94 40 02 	call	0x480	; 0x480 <__fp_pscB>
 514:	20 f0       	brcs	.+8      	; 0x51e <__mulsf3+0x1c>
 516:	95 23       	and	r25, r21
 518:	11 f0       	breq	.+4      	; 0x51e <__mulsf3+0x1c>
 51a:	0c 94 30 02 	jmp	0x460	; 0x460 <__fp_inf>
 51e:	0c 94 36 02 	jmp	0x46c	; 0x46c <__fp_nan>
 522:	11 24       	eor	r1, r1
 524:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__fp_szero>

00000528 <__mulsf3x>:
 528:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__fp_split3>
 52c:	70 f3       	brcs	.-36     	; 0x50a <__mulsf3+0x8>

0000052e <__mulsf3_pse>:
 52e:	95 9f       	mul	r25, r21
 530:	c1 f3       	breq	.-16     	; 0x522 <__mulsf3+0x20>
 532:	95 0f       	add	r25, r21
 534:	50 e0       	ldi	r21, 0x00	; 0
 536:	55 1f       	adc	r21, r21
 538:	62 9f       	mul	r22, r18
 53a:	f0 01       	movw	r30, r0
 53c:	72 9f       	mul	r23, r18
 53e:	bb 27       	eor	r27, r27
 540:	f0 0d       	add	r31, r0
 542:	b1 1d       	adc	r27, r1
 544:	63 9f       	mul	r22, r19
 546:	aa 27       	eor	r26, r26
 548:	f0 0d       	add	r31, r0
 54a:	b1 1d       	adc	r27, r1
 54c:	aa 1f       	adc	r26, r26
 54e:	64 9f       	mul	r22, r20
 550:	66 27       	eor	r22, r22
 552:	b0 0d       	add	r27, r0
 554:	a1 1d       	adc	r26, r1
 556:	66 1f       	adc	r22, r22
 558:	82 9f       	mul	r24, r18
 55a:	22 27       	eor	r18, r18
 55c:	b0 0d       	add	r27, r0
 55e:	a1 1d       	adc	r26, r1
 560:	62 1f       	adc	r22, r18
 562:	73 9f       	mul	r23, r19
 564:	b0 0d       	add	r27, r0
 566:	a1 1d       	adc	r26, r1
 568:	62 1f       	adc	r22, r18
 56a:	83 9f       	mul	r24, r19
 56c:	a0 0d       	add	r26, r0
 56e:	61 1d       	adc	r22, r1
 570:	22 1f       	adc	r18, r18
 572:	74 9f       	mul	r23, r20
 574:	33 27       	eor	r19, r19
 576:	a0 0d       	add	r26, r0
 578:	61 1d       	adc	r22, r1
 57a:	23 1f       	adc	r18, r19
 57c:	84 9f       	mul	r24, r20
 57e:	60 0d       	add	r22, r0
 580:	21 1d       	adc	r18, r1
 582:	82 2f       	mov	r24, r18
 584:	76 2f       	mov	r23, r22
 586:	6a 2f       	mov	r22, r26
 588:	11 24       	eor	r1, r1
 58a:	9f 57       	subi	r25, 0x7F	; 127
 58c:	50 40       	sbci	r21, 0x00	; 0
 58e:	9a f0       	brmi	.+38     	; 0x5b6 <__mulsf3_pse+0x88>
 590:	f1 f0       	breq	.+60     	; 0x5ce <__mulsf3_pse+0xa0>
 592:	88 23       	and	r24, r24
 594:	4a f0       	brmi	.+18     	; 0x5a8 <__mulsf3_pse+0x7a>
 596:	ee 0f       	add	r30, r30
 598:	ff 1f       	adc	r31, r31
 59a:	bb 1f       	adc	r27, r27
 59c:	66 1f       	adc	r22, r22
 59e:	77 1f       	adc	r23, r23
 5a0:	88 1f       	adc	r24, r24
 5a2:	91 50       	subi	r25, 0x01	; 1
 5a4:	50 40       	sbci	r21, 0x00	; 0
 5a6:	a9 f7       	brne	.-22     	; 0x592 <__mulsf3_pse+0x64>
 5a8:	9e 3f       	cpi	r25, 0xFE	; 254
 5aa:	51 05       	cpc	r21, r1
 5ac:	80 f0       	brcs	.+32     	; 0x5ce <__mulsf3_pse+0xa0>
 5ae:	0c 94 30 02 	jmp	0x460	; 0x460 <__fp_inf>
 5b2:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__fp_szero>
 5b6:	5f 3f       	cpi	r21, 0xFF	; 255
 5b8:	e4 f3       	brlt	.-8      	; 0x5b2 <__mulsf3_pse+0x84>
 5ba:	98 3e       	cpi	r25, 0xE8	; 232
 5bc:	d4 f3       	brlt	.-12     	; 0x5b2 <__mulsf3_pse+0x84>
 5be:	86 95       	lsr	r24
 5c0:	77 95       	ror	r23
 5c2:	67 95       	ror	r22
 5c4:	b7 95       	ror	r27
 5c6:	f7 95       	ror	r31
 5c8:	e7 95       	ror	r30
 5ca:	9f 5f       	subi	r25, 0xFF	; 255
 5cc:	c1 f7       	brne	.-16     	; 0x5be <__mulsf3_pse+0x90>
 5ce:	fe 2b       	or	r31, r30
 5d0:	88 0f       	add	r24, r24
 5d2:	91 1d       	adc	r25, r1
 5d4:	96 95       	lsr	r25
 5d6:	87 95       	ror	r24
 5d8:	97 f9       	bld	r25, 7
 5da:	08 95       	ret

000005dc <_exit>:
 5dc:	f8 94       	cli

000005de <__stop_program>:
 5de:	ff cf       	rjmp	.-2      	; 0x5de <__stop_program>


Postlaboratorio_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000604  00000698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000604  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800102  00800102  0000069a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000069a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a08  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080e  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b6  00000000  00000000  000019da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00001f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000449  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000114  00000000  00000000  00002535  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002649  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 84 00 	call	0x108	; 0x108 <main>
  9e:	0c 94 00 03 	jmp	0x600	; 0x600 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <INIT_ADC>:

}


void INIT_ADC(){
	ADMUX = 0;	//Apagar todo
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	
	//Voltaje de referencia 5V
	ADMUX |=(1<<REFS0);
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); //orientación (izquierda)
  b2:	80 81       	ld	r24, Z
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	80 83       	st	Z, r24
	ADCSRA = 0;	//Apagar todo
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	10 82       	st	Z, r1
	ADCSRA |=(1<<ADPS1)	| (1 << ADPS0); //Configuración del presacaler 8
  be:	80 81       	ld	r24, Z
  c0:	83 60       	ori	r24, 0x03	; 3
  c2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//Habilitación de interrupciones
  c4:	80 81       	ld	r24, Z
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	//Habilitar ADS
  ca:	80 81       	ld	r24, Z
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	80 83       	st	Z, r24
  d0:	08 95       	ret

000000d2 <setup>:
	{	
	}
}

void setup(){
	cli();	//Desabilitar interrupciones
  d2:	f8 94       	cli
	//INIT_TMR1();	//Llamar a la configuración del timer
	INIT_ADC();
  d4:	0e 94 53 00 	call	0xa6	; 0xa6 <INIT_ADC>
	initPWM1A();
  d8:	0e 94 0d 01 	call	0x21a	; 0x21a <initPWM1A>
	initPWM1B();
  dc:	0e 94 2e 01 	call	0x25c	; 0x25c <initPWM1B>
	//init del timer 0 para el 3er pwm
	INIT_TMR0();
  e0:	0e 94 3d 01 	call	0x27a	; 0x27a <INIT_TMR0>
	DDRB|=(1 << PORTB0);
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	84 b9       	out	0x04, r24	; 4
	CLKPR = (1 << CLKPCE); //Habilita cambios de prescaler
  ea:	e1 e6       	ldi	r30, 0x61	; 97
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 e8       	ldi	r24, 0x80	; 128
  f0:	80 83       	st	Z, r24
	CLKPR = (1 << CLKPS2);	// 1MHz
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	80 83       	st	Z, r24
	UCSR0B=0;	//Apagar los bit 0 y 1 del puerto D
  f6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	sei();		//Habilita cambios de interrupción
  fa:	78 94       	sei
	
	ADCSRA |= (1 << ADSC); // Iniciar primera conversión
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <main>:
void INIT_TMR0();
void INIT_ADC();

int main(void)
{
	setup();
 108:	0e 94 69 00 	call	0xd2	; 0xd2 <setup>
 10c:	ff cf       	rjmp	.-2      	; 0x10c <main+0x4>

0000010e <__vector_21>:
}

/*************VECTOR DE INTERRUPCIÓN************/

ISR(ADC_vect)
{
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
	POT++;
 130:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <POT>
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <POT>
	
	switch (POT){
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	81 f1       	breq	.+96     	; 0x19e <__vector_21+0x90>
 13e:	18 f4       	brcc	.+6      	; 0x146 <__vector_21+0x38>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	41 f0       	breq	.+16     	; 0x154 <__vector_21+0x46>
 144:	54 c0       	rjmp	.+168    	; 0x1ee <__vector_21+0xe0>
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	09 f4       	brne	.+2      	; 0x14c <__vector_21+0x3e>
 14a:	4b c0       	rjmp	.+150    	; 0x1e2 <__vector_21+0xd4>
 14c:	84 30       	cpi	r24, 0x04	; 4
 14e:	09 f4       	brne	.+2      	; 0x152 <__vector_21+0x44>
 150:	4c c0       	rjmp	.+152    	; 0x1ea <__vector_21+0xdc>
 152:	4d c0       	rjmp	.+154    	; 0x1ee <__vector_21+0xe0>
		case 1:
			ADMUX &= ~(1<<MUX0);  // Limpiar bit MUX0 primero
 154:	ec e7       	ldi	r30, 0x7C	; 124
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	8e 7f       	andi	r24, 0xFE	; 254
 15c:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX2) | (1<<MUX1);//Selección de canal Bit 6 del puerto C
 15e:	80 81       	ld	r24, Z
 160:	86 60       	ori	r24, 0x06	; 6
 162:	80 83       	st	Z, r24
			ADC1=ADCH;
 164:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 168:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <ADC1>
			dutyCycle1 = (ADC1 * (188.0 / 255.0)) + 69.0;
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 07 02 	call	0x40e	; 0x40e <__floatsisf>
 176:	2d eb       	ldi	r18, 0xBD	; 189
 178:	3c eb       	ldi	r19, 0xBC	; 188
 17a:	4c e3       	ldi	r20, 0x3C	; 60
 17c:	5f e3       	ldi	r21, 0x3F	; 63
 17e:	0e 94 93 02 	call	0x526	; 0x526 <__mulsf3>
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	4a e8       	ldi	r20, 0x8A	; 138
 188:	52 e4       	ldi	r21, 0x42	; 66
 18a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__addsf3>
 18e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__fixunssfsi>
 192:	86 2f       	mov	r24, r22
 194:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <dutyCycle1>
			updateDutyCycle1(dutyCycle1); // Actualizar PWM
 198:	0e 94 28 01 	call	0x250	; 0x250 <updateDutyCycle1>
			break;
 19c:	28 c0       	rjmp	.+80     	; 0x1ee <__vector_21+0xe0>
		
		case 2:
			ADMUX |= (1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Selección de canal Bit 7 del puerto C
 19e:	ec e7       	ldi	r30, 0x7C	; 124
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	87 60       	ori	r24, 0x07	; 7
 1a6:	80 83       	st	Z, r24
			ADC2=ADCH;
 1a8:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1ac:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_end>
			dutyCycle2 = (ADC2 * (188.0 / 255.0)) + 69.0;
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 07 02 	call	0x40e	; 0x40e <__floatsisf>
 1ba:	2d eb       	ldi	r18, 0xBD	; 189
 1bc:	3c eb       	ldi	r19, 0xBC	; 188
 1be:	4c e3       	ldi	r20, 0x3C	; 60
 1c0:	5f e3       	ldi	r21, 0x3F	; 63
 1c2:	0e 94 93 02 	call	0x526	; 0x526 <__mulsf3>
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	4a e8       	ldi	r20, 0x8A	; 138
 1cc:	52 e4       	ldi	r21, 0x42	; 66
 1ce:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__addsf3>
 1d2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__fixunssfsi>
 1d6:	86 2f       	mov	r24, r22
 1d8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
			updateDutyCycle1B(dutyCycle2); // Actualizar PWM
 1dc:	0e 94 37 01 	call	0x26e	; 0x26e <updateDutyCycle1B>
			break;
 1e0:	06 c0       	rjmp	.+12     	; 0x1ee <__vector_21+0xe0>
		
		case 3:
			PORTD|= (1<<PORTD6);
 1e2:	8b b1       	in	r24, 0x0b	; 11
 1e4:	80 64       	ori	r24, 0x40	; 64
 1e6:	8b b9       	out	0x0b, r24	; 11
			/*
			ADMUX &= ~(1<<MUX1);  // Limpiar bit MUX0 primero
			ADMUX |= (1<<MUX2)|(1<<MUX0); //Selección de canal Bit 5 del puerto C
			ADC3=ADCH;
			updateDutyCycle_3(ADC3); // Actualizar PWM*/
			break;
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <__vector_21+0xe0>
			
		case 4:
			POT=0;
 1ea:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <POT>
		
		default:
			break;
	}
	 
	ADCSRA |= (1 << ADSC);	//Iniciar nueva conversión
 1ee:	ea e7       	ldi	r30, 0x7A	; 122
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	80 64       	ori	r24, 0x40	; 64
 1f6:	80 83       	st	Z, r24
}
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	7f 91       	pop	r23
 206:	6f 91       	pop	r22
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <initPWM1A>:
#include <avr/io.h>
#include "PWM1.h"

void initPWM1A(){
	
	DDRB |= (1 << DDB1);	//Setear bit 1 del puerto B como salida
 21a:	84 b1       	in	r24, 0x04	; 4
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	84 b9       	out	0x04, r24	; 4
	
	//CONFIGURACIÓN DEL TIMER 1 PARA FAST PWM CON OCR1A COMO TOP
	TCCR1A = 0;
 220:	e0 e8       	ldi	r30, 0x80	; 128
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	10 82       	st	Z, r1
	TCCR1A |= (1 << COM1A1);	//no invertido
 226:	80 81       	ld	r24, Z
 228:	80 68       	ori	r24, 0x80	; 128
 22a:	80 83       	st	Z, r24
	
	//Modo fast PMW y top->OCR1A (MODO 14)
	TCCR1A |= (1 << WGM11);
 22c:	80 81       	ld	r24, Z
 22e:	82 60       	ori	r24, 0x02	; 2
 230:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 232:	e1 e8       	ldi	r30, 0x81	; 129
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	88 61       	ori	r24, 0x18	; 24
 23a:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);	//Prescaler de 8
 23c:	80 81       	ld	r24, Z
 23e:	82 60       	ori	r24, 0x02	; 2
 240:	80 83       	st	Z, r24
	ICR1 = 2499;	//TOP
 242:	83 ec       	ldi	r24, 0xC3	; 195
 244:	99 e0       	ldi	r25, 0x09	; 9
 246:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 24a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 24e:	08 95       	ret

00000250 <updateDutyCycle1>:
	
}

void  updateDutyCycle1(uint8_t duty){
	OCR1A = duty;
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 256:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 25a:	08 95       	ret

0000025c <initPWM1B>:
#include <avr/io.h>
#include "PWM1B.h"

void initPWM1B(){
	
	DDRB |= (1 << DDB2);	//Setear bit 2 del puerto B como salida
 25c:	84 b1       	in	r24, 0x04	; 4
 25e:	84 60       	ori	r24, 0x04	; 4
 260:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1 << COM1B1);	//no invertido	
 262:	e0 e8       	ldi	r30, 0x80	; 128
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	80 62       	ori	r24, 0x20	; 32
 26a:	80 83       	st	Z, r24
 26c:	08 95       	ret

0000026e <updateDutyCycle1B>:
}

void  updateDutyCycle1B(uint8_t duty){
	OCR1B = duty;
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 274:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 278:	08 95       	ret

0000027a <INIT_TMR0>:
	TCNT0 = 0xB1;	//Desborde cada 0.5ms
	TIMSK0 = (1 << TOIE0);	//Habilitar interrupciones del timer 0
}

void  updateDutyCycle_3(uint8_t duty){
	OCR1B = duty;
 27a:	8a b1       	in	r24, 0x0a	; 10
 27c:	80 64       	ori	r24, 0x40	; 64
 27e:	8a b9       	out	0x0a, r24	; 10
 280:	14 bc       	out	0x24, r1	; 36
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	85 bd       	out	0x25, r24	; 37
 286:	81 eb       	ldi	r24, 0xB1	; 177
 288:	86 bd       	out	0x26, r24	; 38
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 290:	08 95       	ret

00000292 <__vector_16>:
}
		
	
ISR(TIMER0_OVF_vect){
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	8f 93       	push	r24
 29e:	9f 93       	push	r25
	TCNT0 = 0xB1;	//Desborde cada 0.5ms
 2a0:	81 eb       	ldi	r24, 0xB1	; 177
 2a2:	86 bd       	out	0x26, r24	; 38
	if (CONT >= limite)
 2a4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <CONT>
 2a8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <limite>
 2ac:	98 17       	cp	r25, r24
 2ae:	10 f0       	brcs	.+4      	; 0x2b4 <__vector_16+0x22>
	{
		PORTD=0;
 2b0:	1b b8       	out	0x0b, r1	; 11
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <__vector_16+0x28>
	}
	
	else{
		PORTD|= (1<<PORTD6);
 2b4:	8b b1       	in	r24, 0x0b	; 11
 2b6:	80 64       	ori	r24, 0x40	; 64
 2b8:	8b b9       	out	0x0b, r24	; 11
	}
	
	CONT ++;
 2ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <CONT>
 2be:	8f 5f       	subi	r24, 0xFF	; 255
 2c0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <CONT>
}
 2c4:	9f 91       	pop	r25
 2c6:	8f 91       	pop	r24
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <__subsf3>:
 2d2:	50 58       	subi	r21, 0x80	; 128

000002d4 <__addsf3>:
 2d4:	bb 27       	eor	r27, r27
 2d6:	aa 27       	eor	r26, r26
 2d8:	0e 94 81 01 	call	0x302	; 0x302 <__addsf3x>
 2dc:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_round>
 2e0:	0e 94 4b 02 	call	0x496	; 0x496 <__fp_pscA>
 2e4:	38 f0       	brcs	.+14     	; 0x2f4 <__addsf3+0x20>
 2e6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__fp_pscB>
 2ea:	20 f0       	brcs	.+8      	; 0x2f4 <__addsf3+0x20>
 2ec:	39 f4       	brne	.+14     	; 0x2fc <__addsf3+0x28>
 2ee:	9f 3f       	cpi	r25, 0xFF	; 255
 2f0:	19 f4       	brne	.+6      	; 0x2f8 <__addsf3+0x24>
 2f2:	26 f4       	brtc	.+8      	; 0x2fc <__addsf3+0x28>
 2f4:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_nan>
 2f8:	0e f4       	brtc	.+2      	; 0x2fc <__addsf3+0x28>
 2fa:	e0 95       	com	r30
 2fc:	e7 fb       	bst	r30, 7
 2fe:	0c 94 42 02 	jmp	0x484	; 0x484 <__fp_inf>

00000302 <__addsf3x>:
 302:	e9 2f       	mov	r30, r25
 304:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__fp_split3>
 308:	58 f3       	brcs	.-42     	; 0x2e0 <__addsf3+0xc>
 30a:	ba 17       	cp	r27, r26
 30c:	62 07       	cpc	r22, r18
 30e:	73 07       	cpc	r23, r19
 310:	84 07       	cpc	r24, r20
 312:	95 07       	cpc	r25, r21
 314:	20 f0       	brcs	.+8      	; 0x31e <__addsf3x+0x1c>
 316:	79 f4       	brne	.+30     	; 0x336 <__addsf3x+0x34>
 318:	a6 f5       	brtc	.+104    	; 0x382 <__addsf3x+0x80>
 31a:	0c 94 8c 02 	jmp	0x518	; 0x518 <__fp_zero>
 31e:	0e f4       	brtc	.+2      	; 0x322 <__addsf3x+0x20>
 320:	e0 95       	com	r30
 322:	0b 2e       	mov	r0, r27
 324:	ba 2f       	mov	r27, r26
 326:	a0 2d       	mov	r26, r0
 328:	0b 01       	movw	r0, r22
 32a:	b9 01       	movw	r22, r18
 32c:	90 01       	movw	r18, r0
 32e:	0c 01       	movw	r0, r24
 330:	ca 01       	movw	r24, r20
 332:	a0 01       	movw	r20, r0
 334:	11 24       	eor	r1, r1
 336:	ff 27       	eor	r31, r31
 338:	59 1b       	sub	r21, r25
 33a:	99 f0       	breq	.+38     	; 0x362 <__addsf3x+0x60>
 33c:	59 3f       	cpi	r21, 0xF9	; 249
 33e:	50 f4       	brcc	.+20     	; 0x354 <__addsf3x+0x52>
 340:	50 3e       	cpi	r21, 0xE0	; 224
 342:	68 f1       	brcs	.+90     	; 0x39e <__addsf3x+0x9c>
 344:	1a 16       	cp	r1, r26
 346:	f0 40       	sbci	r31, 0x00	; 0
 348:	a2 2f       	mov	r26, r18
 34a:	23 2f       	mov	r18, r19
 34c:	34 2f       	mov	r19, r20
 34e:	44 27       	eor	r20, r20
 350:	58 5f       	subi	r21, 0xF8	; 248
 352:	f3 cf       	rjmp	.-26     	; 0x33a <__addsf3x+0x38>
 354:	46 95       	lsr	r20
 356:	37 95       	ror	r19
 358:	27 95       	ror	r18
 35a:	a7 95       	ror	r26
 35c:	f0 40       	sbci	r31, 0x00	; 0
 35e:	53 95       	inc	r21
 360:	c9 f7       	brne	.-14     	; 0x354 <__addsf3x+0x52>
 362:	7e f4       	brtc	.+30     	; 0x382 <__addsf3x+0x80>
 364:	1f 16       	cp	r1, r31
 366:	ba 0b       	sbc	r27, r26
 368:	62 0b       	sbc	r22, r18
 36a:	73 0b       	sbc	r23, r19
 36c:	84 0b       	sbc	r24, r20
 36e:	ba f0       	brmi	.+46     	; 0x39e <__addsf3x+0x9c>
 370:	91 50       	subi	r25, 0x01	; 1
 372:	a1 f0       	breq	.+40     	; 0x39c <__addsf3x+0x9a>
 374:	ff 0f       	add	r31, r31
 376:	bb 1f       	adc	r27, r27
 378:	66 1f       	adc	r22, r22
 37a:	77 1f       	adc	r23, r23
 37c:	88 1f       	adc	r24, r24
 37e:	c2 f7       	brpl	.-16     	; 0x370 <__addsf3x+0x6e>
 380:	0e c0       	rjmp	.+28     	; 0x39e <__addsf3x+0x9c>
 382:	ba 0f       	add	r27, r26
 384:	62 1f       	adc	r22, r18
 386:	73 1f       	adc	r23, r19
 388:	84 1f       	adc	r24, r20
 38a:	48 f4       	brcc	.+18     	; 0x39e <__addsf3x+0x9c>
 38c:	87 95       	ror	r24
 38e:	77 95       	ror	r23
 390:	67 95       	ror	r22
 392:	b7 95       	ror	r27
 394:	f7 95       	ror	r31
 396:	9e 3f       	cpi	r25, 0xFE	; 254
 398:	08 f0       	brcs	.+2      	; 0x39c <__addsf3x+0x9a>
 39a:	b0 cf       	rjmp	.-160    	; 0x2fc <__addsf3+0x28>
 39c:	93 95       	inc	r25
 39e:	88 0f       	add	r24, r24
 3a0:	08 f0       	brcs	.+2      	; 0x3a4 <__addsf3x+0xa2>
 3a2:	99 27       	eor	r25, r25
 3a4:	ee 0f       	add	r30, r30
 3a6:	97 95       	ror	r25
 3a8:	87 95       	ror	r24
 3aa:	08 95       	ret

000003ac <__fixunssfsi>:
 3ac:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fp_splitA>
 3b0:	88 f0       	brcs	.+34     	; 0x3d4 <__fixunssfsi+0x28>
 3b2:	9f 57       	subi	r25, 0x7F	; 127
 3b4:	98 f0       	brcs	.+38     	; 0x3dc <__fixunssfsi+0x30>
 3b6:	b9 2f       	mov	r27, r25
 3b8:	99 27       	eor	r25, r25
 3ba:	b7 51       	subi	r27, 0x17	; 23
 3bc:	b0 f0       	brcs	.+44     	; 0x3ea <__fixunssfsi+0x3e>
 3be:	e1 f0       	breq	.+56     	; 0x3f8 <__fixunssfsi+0x4c>
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	88 1f       	adc	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	1a f0       	brmi	.+6      	; 0x3d0 <__fixunssfsi+0x24>
 3ca:	ba 95       	dec	r27
 3cc:	c9 f7       	brne	.-14     	; 0x3c0 <__fixunssfsi+0x14>
 3ce:	14 c0       	rjmp	.+40     	; 0x3f8 <__fixunssfsi+0x4c>
 3d0:	b1 30       	cpi	r27, 0x01	; 1
 3d2:	91 f0       	breq	.+36     	; 0x3f8 <__fixunssfsi+0x4c>
 3d4:	0e 94 8c 02 	call	0x518	; 0x518 <__fp_zero>
 3d8:	b1 e0       	ldi	r27, 0x01	; 1
 3da:	08 95       	ret
 3dc:	0c 94 8c 02 	jmp	0x518	; 0x518 <__fp_zero>
 3e0:	67 2f       	mov	r22, r23
 3e2:	78 2f       	mov	r23, r24
 3e4:	88 27       	eor	r24, r24
 3e6:	b8 5f       	subi	r27, 0xF8	; 248
 3e8:	39 f0       	breq	.+14     	; 0x3f8 <__fixunssfsi+0x4c>
 3ea:	b9 3f       	cpi	r27, 0xF9	; 249
 3ec:	cc f3       	brlt	.-14     	; 0x3e0 <__fixunssfsi+0x34>
 3ee:	86 95       	lsr	r24
 3f0:	77 95       	ror	r23
 3f2:	67 95       	ror	r22
 3f4:	b3 95       	inc	r27
 3f6:	d9 f7       	brne	.-10     	; 0x3ee <__fixunssfsi+0x42>
 3f8:	3e f4       	brtc	.+14     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3fa:	90 95       	com	r25
 3fc:	80 95       	com	r24
 3fe:	70 95       	com	r23
 400:	61 95       	neg	r22
 402:	7f 4f       	sbci	r23, 0xFF	; 255
 404:	8f 4f       	sbci	r24, 0xFF	; 255
 406:	9f 4f       	sbci	r25, 0xFF	; 255
 408:	08 95       	ret

0000040a <__floatunsisf>:
 40a:	e8 94       	clt
 40c:	09 c0       	rjmp	.+18     	; 0x420 <__floatsisf+0x12>

0000040e <__floatsisf>:
 40e:	97 fb       	bst	r25, 7
 410:	3e f4       	brtc	.+14     	; 0x420 <__floatsisf+0x12>
 412:	90 95       	com	r25
 414:	80 95       	com	r24
 416:	70 95       	com	r23
 418:	61 95       	neg	r22
 41a:	7f 4f       	sbci	r23, 0xFF	; 255
 41c:	8f 4f       	sbci	r24, 0xFF	; 255
 41e:	9f 4f       	sbci	r25, 0xFF	; 255
 420:	99 23       	and	r25, r25
 422:	a9 f0       	breq	.+42     	; 0x44e <__floatsisf+0x40>
 424:	f9 2f       	mov	r31, r25
 426:	96 e9       	ldi	r25, 0x96	; 150
 428:	bb 27       	eor	r27, r27
 42a:	93 95       	inc	r25
 42c:	f6 95       	lsr	r31
 42e:	87 95       	ror	r24
 430:	77 95       	ror	r23
 432:	67 95       	ror	r22
 434:	b7 95       	ror	r27
 436:	f1 11       	cpse	r31, r1
 438:	f8 cf       	rjmp	.-16     	; 0x42a <__floatsisf+0x1c>
 43a:	fa f4       	brpl	.+62     	; 0x47a <__floatsisf+0x6c>
 43c:	bb 0f       	add	r27, r27
 43e:	11 f4       	brne	.+4      	; 0x444 <__floatsisf+0x36>
 440:	60 ff       	sbrs	r22, 0
 442:	1b c0       	rjmp	.+54     	; 0x47a <__floatsisf+0x6c>
 444:	6f 5f       	subi	r22, 0xFF	; 255
 446:	7f 4f       	sbci	r23, 0xFF	; 255
 448:	8f 4f       	sbci	r24, 0xFF	; 255
 44a:	9f 4f       	sbci	r25, 0xFF	; 255
 44c:	16 c0       	rjmp	.+44     	; 0x47a <__floatsisf+0x6c>
 44e:	88 23       	and	r24, r24
 450:	11 f0       	breq	.+4      	; 0x456 <__floatsisf+0x48>
 452:	96 e9       	ldi	r25, 0x96	; 150
 454:	11 c0       	rjmp	.+34     	; 0x478 <__floatsisf+0x6a>
 456:	77 23       	and	r23, r23
 458:	21 f0       	breq	.+8      	; 0x462 <__floatsisf+0x54>
 45a:	9e e8       	ldi	r25, 0x8E	; 142
 45c:	87 2f       	mov	r24, r23
 45e:	76 2f       	mov	r23, r22
 460:	05 c0       	rjmp	.+10     	; 0x46c <__floatsisf+0x5e>
 462:	66 23       	and	r22, r22
 464:	71 f0       	breq	.+28     	; 0x482 <__floatsisf+0x74>
 466:	96 e8       	ldi	r25, 0x86	; 134
 468:	86 2f       	mov	r24, r22
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	2a f0       	brmi	.+10     	; 0x47a <__floatsisf+0x6c>
 470:	9a 95       	dec	r25
 472:	66 0f       	add	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	88 1f       	adc	r24, r24
 478:	da f7       	brpl	.-10     	; 0x470 <__floatsisf+0x62>
 47a:	88 0f       	add	r24, r24
 47c:	96 95       	lsr	r25
 47e:	87 95       	ror	r24
 480:	97 f9       	bld	r25, 7
 482:	08 95       	ret

00000484 <__fp_inf>:
 484:	97 f9       	bld	r25, 7
 486:	9f 67       	ori	r25, 0x7F	; 127
 488:	80 e8       	ldi	r24, 0x80	; 128
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	08 95       	ret

00000490 <__fp_nan>:
 490:	9f ef       	ldi	r25, 0xFF	; 255
 492:	80 ec       	ldi	r24, 0xC0	; 192
 494:	08 95       	ret

00000496 <__fp_pscA>:
 496:	00 24       	eor	r0, r0
 498:	0a 94       	dec	r0
 49a:	16 16       	cp	r1, r22
 49c:	17 06       	cpc	r1, r23
 49e:	18 06       	cpc	r1, r24
 4a0:	09 06       	cpc	r0, r25
 4a2:	08 95       	ret

000004a4 <__fp_pscB>:
 4a4:	00 24       	eor	r0, r0
 4a6:	0a 94       	dec	r0
 4a8:	12 16       	cp	r1, r18
 4aa:	13 06       	cpc	r1, r19
 4ac:	14 06       	cpc	r1, r20
 4ae:	05 06       	cpc	r0, r21
 4b0:	08 95       	ret

000004b2 <__fp_round>:
 4b2:	09 2e       	mov	r0, r25
 4b4:	03 94       	inc	r0
 4b6:	00 0c       	add	r0, r0
 4b8:	11 f4       	brne	.+4      	; 0x4be <__fp_round+0xc>
 4ba:	88 23       	and	r24, r24
 4bc:	52 f0       	brmi	.+20     	; 0x4d2 <__fp_round+0x20>
 4be:	bb 0f       	add	r27, r27
 4c0:	40 f4       	brcc	.+16     	; 0x4d2 <__fp_round+0x20>
 4c2:	bf 2b       	or	r27, r31
 4c4:	11 f4       	brne	.+4      	; 0x4ca <__fp_round+0x18>
 4c6:	60 ff       	sbrs	r22, 0
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <__fp_round+0x20>
 4ca:	6f 5f       	subi	r22, 0xFF	; 255
 4cc:	7f 4f       	sbci	r23, 0xFF	; 255
 4ce:	8f 4f       	sbci	r24, 0xFF	; 255
 4d0:	9f 4f       	sbci	r25, 0xFF	; 255
 4d2:	08 95       	ret

000004d4 <__fp_split3>:
 4d4:	57 fd       	sbrc	r21, 7
 4d6:	90 58       	subi	r25, 0x80	; 128
 4d8:	44 0f       	add	r20, r20
 4da:	55 1f       	adc	r21, r21
 4dc:	59 f0       	breq	.+22     	; 0x4f4 <__fp_splitA+0x10>
 4de:	5f 3f       	cpi	r21, 0xFF	; 255
 4e0:	71 f0       	breq	.+28     	; 0x4fe <__fp_splitA+0x1a>
 4e2:	47 95       	ror	r20

000004e4 <__fp_splitA>:
 4e4:	88 0f       	add	r24, r24
 4e6:	97 fb       	bst	r25, 7
 4e8:	99 1f       	adc	r25, r25
 4ea:	61 f0       	breq	.+24     	; 0x504 <__fp_splitA+0x20>
 4ec:	9f 3f       	cpi	r25, 0xFF	; 255
 4ee:	79 f0       	breq	.+30     	; 0x50e <__fp_splitA+0x2a>
 4f0:	87 95       	ror	r24
 4f2:	08 95       	ret
 4f4:	12 16       	cp	r1, r18
 4f6:	13 06       	cpc	r1, r19
 4f8:	14 06       	cpc	r1, r20
 4fa:	55 1f       	adc	r21, r21
 4fc:	f2 cf       	rjmp	.-28     	; 0x4e2 <__fp_split3+0xe>
 4fe:	46 95       	lsr	r20
 500:	f1 df       	rcall	.-30     	; 0x4e4 <__fp_splitA>
 502:	08 c0       	rjmp	.+16     	; 0x514 <__fp_splitA+0x30>
 504:	16 16       	cp	r1, r22
 506:	17 06       	cpc	r1, r23
 508:	18 06       	cpc	r1, r24
 50a:	99 1f       	adc	r25, r25
 50c:	f1 cf       	rjmp	.-30     	; 0x4f0 <__fp_splitA+0xc>
 50e:	86 95       	lsr	r24
 510:	71 05       	cpc	r23, r1
 512:	61 05       	cpc	r22, r1
 514:	08 94       	sec
 516:	08 95       	ret

00000518 <__fp_zero>:
 518:	e8 94       	clt

0000051a <__fp_szero>:
 51a:	bb 27       	eor	r27, r27
 51c:	66 27       	eor	r22, r22
 51e:	77 27       	eor	r23, r23
 520:	cb 01       	movw	r24, r22
 522:	97 f9       	bld	r25, 7
 524:	08 95       	ret

00000526 <__mulsf3>:
 526:	0e 94 a6 02 	call	0x54c	; 0x54c <__mulsf3x>
 52a:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_round>
 52e:	0e 94 4b 02 	call	0x496	; 0x496 <__fp_pscA>
 532:	38 f0       	brcs	.+14     	; 0x542 <__mulsf3+0x1c>
 534:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__fp_pscB>
 538:	20 f0       	brcs	.+8      	; 0x542 <__mulsf3+0x1c>
 53a:	95 23       	and	r25, r21
 53c:	11 f0       	breq	.+4      	; 0x542 <__mulsf3+0x1c>
 53e:	0c 94 42 02 	jmp	0x484	; 0x484 <__fp_inf>
 542:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_nan>
 546:	11 24       	eor	r1, r1
 548:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__fp_szero>

0000054c <__mulsf3x>:
 54c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__fp_split3>
 550:	70 f3       	brcs	.-36     	; 0x52e <__mulsf3+0x8>

00000552 <__mulsf3_pse>:
 552:	95 9f       	mul	r25, r21
 554:	c1 f3       	breq	.-16     	; 0x546 <__mulsf3+0x20>
 556:	95 0f       	add	r25, r21
 558:	50 e0       	ldi	r21, 0x00	; 0
 55a:	55 1f       	adc	r21, r21
 55c:	62 9f       	mul	r22, r18
 55e:	f0 01       	movw	r30, r0
 560:	72 9f       	mul	r23, r18
 562:	bb 27       	eor	r27, r27
 564:	f0 0d       	add	r31, r0
 566:	b1 1d       	adc	r27, r1
 568:	63 9f       	mul	r22, r19
 56a:	aa 27       	eor	r26, r26
 56c:	f0 0d       	add	r31, r0
 56e:	b1 1d       	adc	r27, r1
 570:	aa 1f       	adc	r26, r26
 572:	64 9f       	mul	r22, r20
 574:	66 27       	eor	r22, r22
 576:	b0 0d       	add	r27, r0
 578:	a1 1d       	adc	r26, r1
 57a:	66 1f       	adc	r22, r22
 57c:	82 9f       	mul	r24, r18
 57e:	22 27       	eor	r18, r18
 580:	b0 0d       	add	r27, r0
 582:	a1 1d       	adc	r26, r1
 584:	62 1f       	adc	r22, r18
 586:	73 9f       	mul	r23, r19
 588:	b0 0d       	add	r27, r0
 58a:	a1 1d       	adc	r26, r1
 58c:	62 1f       	adc	r22, r18
 58e:	83 9f       	mul	r24, r19
 590:	a0 0d       	add	r26, r0
 592:	61 1d       	adc	r22, r1
 594:	22 1f       	adc	r18, r18
 596:	74 9f       	mul	r23, r20
 598:	33 27       	eor	r19, r19
 59a:	a0 0d       	add	r26, r0
 59c:	61 1d       	adc	r22, r1
 59e:	23 1f       	adc	r18, r19
 5a0:	84 9f       	mul	r24, r20
 5a2:	60 0d       	add	r22, r0
 5a4:	21 1d       	adc	r18, r1
 5a6:	82 2f       	mov	r24, r18
 5a8:	76 2f       	mov	r23, r22
 5aa:	6a 2f       	mov	r22, r26
 5ac:	11 24       	eor	r1, r1
 5ae:	9f 57       	subi	r25, 0x7F	; 127
 5b0:	50 40       	sbci	r21, 0x00	; 0
 5b2:	9a f0       	brmi	.+38     	; 0x5da <__mulsf3_pse+0x88>
 5b4:	f1 f0       	breq	.+60     	; 0x5f2 <__mulsf3_pse+0xa0>
 5b6:	88 23       	and	r24, r24
 5b8:	4a f0       	brmi	.+18     	; 0x5cc <__mulsf3_pse+0x7a>
 5ba:	ee 0f       	add	r30, r30
 5bc:	ff 1f       	adc	r31, r31
 5be:	bb 1f       	adc	r27, r27
 5c0:	66 1f       	adc	r22, r22
 5c2:	77 1f       	adc	r23, r23
 5c4:	88 1f       	adc	r24, r24
 5c6:	91 50       	subi	r25, 0x01	; 1
 5c8:	50 40       	sbci	r21, 0x00	; 0
 5ca:	a9 f7       	brne	.-22     	; 0x5b6 <__mulsf3_pse+0x64>
 5cc:	9e 3f       	cpi	r25, 0xFE	; 254
 5ce:	51 05       	cpc	r21, r1
 5d0:	80 f0       	brcs	.+32     	; 0x5f2 <__mulsf3_pse+0xa0>
 5d2:	0c 94 42 02 	jmp	0x484	; 0x484 <__fp_inf>
 5d6:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__fp_szero>
 5da:	5f 3f       	cpi	r21, 0xFF	; 255
 5dc:	e4 f3       	brlt	.-8      	; 0x5d6 <__mulsf3_pse+0x84>
 5de:	98 3e       	cpi	r25, 0xE8	; 232
 5e0:	d4 f3       	brlt	.-12     	; 0x5d6 <__mulsf3_pse+0x84>
 5e2:	86 95       	lsr	r24
 5e4:	77 95       	ror	r23
 5e6:	67 95       	ror	r22
 5e8:	b7 95       	ror	r27
 5ea:	f7 95       	ror	r31
 5ec:	e7 95       	ror	r30
 5ee:	9f 5f       	subi	r25, 0xFF	; 255
 5f0:	c1 f7       	brne	.-16     	; 0x5e2 <__mulsf3_pse+0x90>
 5f2:	fe 2b       	or	r31, r30
 5f4:	88 0f       	add	r24, r24
 5f6:	91 1d       	adc	r25, r1
 5f8:	96 95       	lsr	r25
 5fa:	87 95       	ror	r24
 5fc:	97 f9       	bld	r25, 7
 5fe:	08 95       	ret

00000600 <_exit>:
 600:	f8 94       	cli

00000602 <__stop_program>:
 602:	ff cf       	rjmp	.-2      	; 0x602 <__stop_program>
